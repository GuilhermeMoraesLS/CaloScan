{
  "name": "barcode-workflow copy",
  "nodes": [
    {
      "parameters": {
        "jsCode": "const BINARY_FIELD = 'data';\n\nreturn items.map(item => {\n  if (!item.binary || !item.binary[BINARY_FIELD]) {\n    throw new Error(`No binary data found under ‚Äú${BINARY_FIELD}‚Äù.`);\n  }\n\n  // item.binary[BINARY_FIELD].data is already a Base64 string,\n  // but to be sure (and to handle raw buffers) we normalize via Buffer:\n  const raw = item.binary[BINARY_FIELD].data;\n  const buffer = Buffer.from(raw, 'base64');\n  const base64 = buffer.toString('base64');\n\n  // return a new JSON-only item with the Base64 (or attach it to json)\n  return {\n    json: {\n      base64,\n      mimeType: item.binary[BINARY_FIELD].mimeType,\n      fileName: item.binary[BINARY_FIELD].fileName,\n    },\n    binary: {}\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        780
      ],
      "id": "5e2c439d-7b9a-4430-8d68-acfa436fa340",
      "name": "Code"
    },
    {
      "parameters": {
        "collection": "products",
        "options": {},
        "query": "={\"code\": \"{{ $json.data.barcodeValue }}\"}"
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [
        1120,
        680
      ],
      "id": "20ee6848-6042-498c-b29b-686c5f8e7bf0",
      "name": "MongoDB",
      "credentials": {
        "mongoDb": {
          "id": "R0XB7GXfu4DVDkeF",
          "name": "MongoDB account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n\t// --- Extrai e garante que s√£o n√∫meros ---\n\tconst {\n\t\tserving_quantity,\n\t\tfat_100g,\n\t\tcarbohydrates_100g,\n\t\tproteins_100g,\n\t} = item.json;\n\n\tconst porcao = Number(serving_quantity) || 0;\n\tconst fat100  = Number(fat_100g) || 0;\n\tconst carb100 = Number(carbohydrates_100g) || 0;\n\tconst prot100 = Number(proteins_100g) || 0;\n\n\t// --- Converte valores para a por√ß√£o espec√≠fica ---\n\tconst fator = porcao / 100;\n\tconst gordPorcao = +(fat100  * fator).toFixed(1);   // uma casa decimal\n\tconst carbPorcao = +(carb100 * fator).toFixed(1);\n\tconst protPorcao = +(prot100 * fator).toFixed(1);\n\n\t// --- Calcula calorias ---\n\tconst kcal = Math.round(gordPorcao*9 + (carbPorcao + protPorcao)*4);\n\n\t// --- Monta a frase no formato pedido ---\n\tconst prompt = `O produto tem ${porcao} g: ${kcal} kcal (${carbPorcao} g carb, ${protPorcao} g prot, ${gordPorcao} g gord). Deseja adicionar ao di√°rio? (sim/n√£o)`;\n\n\t// Anexa a nova chave ao item e devolve\n\titem.json.prompt = prompt;\n\treturn item;\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1340,
        680
      ],
      "id": "c2168a7b-bb66-4bf5-98d5-213ab8e7ac38",
      "name": "Code1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.imgbb.com/1/upload?key=e0dd0de95647154937757505675f9594",
        "sendBody": true,
        "contentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            {
              "name": "image",
              "value": "={{ $json.base64 }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -200,
        -100
      ],
      "id": "d75bd995-649c-43f2-8ded-67c571e4c6ea",
      "name": "cdn-image"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://barcode-scanner-production.up.railway.app/detect-flexible",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 91c4c1f5-e612-4718-8d08-4777e73d8a15"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "image_url",
              "value": "={{ $('Webhook1').item.json.body.image.imageUrl }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        680,
        780
      ],
      "id": "ed40f646-8c5e-461a-9af1-28d066e80f86",
      "name": "barcode-scanner1",
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "formTitle": "image",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Upload an barcode image",
              "fieldType": "file",
              "multipleFiles": false
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -200,
        -360
      ],
      "id": "548ae8bb-5765-448c-b9e4-16823611ace4",
      "name": "On form submission",
      "webhookId": "32f6b81d-077e-4e96-b4a4-2dc486df11f9"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e61db71f-6cc8-4eac-8e8d-2f31e18b6a83",
              "leftValue": "={{ $json.data.barcodeValue }}",
              "rightValue": "=",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        900,
        780
      ],
      "id": "7b826520-91c4-4991-ac5f-160b5b7181fe",
      "name": "If"
    },
    {
      "parameters": {
        "path": "c1056b27-fa2f-4f65-ab9c-f84e711876f9",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -560,
        320
      ],
      "id": "50173862-b759-4a24-bf0f-d71d8f19d64a",
      "name": "Webhook",
      "webhookId": "c1056b27-fa2f-4f65-ab9c-f84e711876f9"
    },
    {
      "parameters": {
        "url": "={{ $json.body.photo }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        240,
        780
      ],
      "id": "a62a6399-bdd5-4200-a4c4-b21ebe1fca47",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "url": "={{ $('cdn-image').item.json.data.delete_url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -200,
        160
      ],
      "id": "8059e0b1-2f29-40d1-b44a-c302ae1d0c29",
      "name": "delete-cdn"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 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"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"gpt-4o\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"# Prompt para An√°lise Nutricional - Logger de Comida\\n\\nVoc√™ √© um nutricionista virtual especializado em an√°lise de pratos. Ao receber a imagem de uma refei√ß√£o, siga este processo estruturado:\\n\\n## PASSO 1: IDENTIFICA√á√ÉO E ESTIMATIVA DE PESO\\n- Identifique cada alimento vis√≠vel no prato\\n- Estime o peso de cada item em gramas (baseado no tamanho visual e por√ß√µes t√≠picas)\\n- Liste cada alimento com sua respectiva estimativa de peso\\n\\n## PASSO 2: AN√ÅLISE NUTRICIONAL DETALHADA\\nPara cada alimento identificado, calcule:\\n- Calorias por 100g do alimento\\n- Gordura por 100g (em gramas)\\n- Prote√≠na por 100g (em gramas)\\n- Carboidrato por 100g (em gramas)\\n\\n## PASSO 3: C√ÅLCULO PROPORCIONAL\\nCom base no peso estimado de cada alimento, calcule os valores nutricionais proporcionais:\\n- Multiplique os valores por 100g pela quantidade estimada\\n- Some todos os valores para obter o total da refei√ß√£o\\n\\n## PASSO 4: RESPOSTA FINAL\\nEstruture sua resposta de forma amig√°vel e descontra√≠da:\\n\\n**Formato da resposta:**\\n1. Comece com uma frase animada (ex: \\\"Que prato gostoso!\\\", \\\"Olha s√≥ essa del√≠cia!\\\")\\n2. Descreva brevemente o que v√™ no prato\\n3. Apresente o resumo nutricional total:\\n   - Calorias totais (kcal)\\n   - Carboidratos totais (g)\\n   - Prote√≠nas totais (g)\\n   - Gorduras totais (g)\\n4. **SEMPRE termine perguntando**: \\\"Quer que eu adicione essa refei√ß√£o ao seu log de hoje? üìù\\\"\\n\\n## EXEMPLO DE RESPOSTA:\\n\\\"Que del√≠cia! Vejo aqui arroz branco (~120g), peito de frango grelhado (~100g) e salada verde (~50g).\\n\\n**Resumo nutricional:**\\nüî• Calorias: ~485 kcal\\nüåæ Carboidratos: ~52g\\nüí™ Prote√≠nas: ~35g\\nü•ë Gorduras: ~8g\\n\\nQuer que eu adicione essa refei√ß√£o ao seu log de hoje? üìù\\\"\\n\\n## DIRETRIZES IMPORTANTES:\\n- Use linguagem casual e amig√°vel (como WhatsApp)\\n- Seja preciso mas n√£o t√©cnico demais\\n- N√£o invente alimentos que n√£o consegue ver claramente\\n- Baseie-se em por√ß√µes realistas e t√≠picas\\n- Sempre inclua a pergunta final sobre adicionar ao log\\n- Use emojis para deixar mais visual e amig√°vel\"\n        },\n        {\n          \"type\": \"image_url\",\n          \"image_url\": {\n            \"url\": \"{{ $('Webhook1').item.json.body.image.imageUrl }}\"\n          }\n        }\n      ]\n    }\n  ],\n  \"max_tokens\": 500\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1120,
        880
      ],
      "id": "22db3b1a-904c-49a3-b4d7-725261a04580",
      "name": "gpt-api"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/3E1D888E8D8DE07F56022E7FADD21987/token/ED2BF32A855B887106BAAD09/send-text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "client-token",
              "value": "F60d85846fe6a4bfd986f72916b85da2fS"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $('Webhook1').item.json.body.phone }}"
            },
            {
              "name": "message",
              "value": "={{ $json.choices[0].message.content }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1340,
        880
      ],
      "id": "116422ca-a92f-45b1-8d2b-ebe750e91812",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/3E1D888E8D8DE07F56022E7FADD21987/token/ED2BF32A855B887106BAAD09/send-text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "client-token",
              "value": "F60d85846fe6a4bfd986f72916b85da2fS"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $('Webhook1').item.json.body.phone }}"
            },
            {
              "name": "message",
              "value": "={{ $json.prompt }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1560,
        680
      ],
      "id": "70ff3c57-1bc6-4a46-bd22-bb6a08dd016a",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        500,
        1260
      ],
      "id": "a643ec28-1d40-4cbb-b189-66c532a90070",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "906511c9-457d-4610-961d-d817039a350c",
              "name": "body.messageId",
              "value": "={{ $json.body.messageId }}",
              "type": "string"
            },
            {
              "id": "59f45bf0-18d5-408d-bb51-448d2afccbc7",
              "name": "body.phone",
              "value": "={{ $json.body.phone }}",
              "type": "string"
            },
            {
              "id": "df0f1137-3fa2-4fbc-81e9-8e4d1dace7c0",
              "name": "body.chatName",
              "value": "={{ $json.body.chatName }}",
              "type": "string"
            },
            {
              "id": "aed460bc-bec5-4e9a-8c55-45247dc3478f",
              "name": "body.photo",
              "value": "={{ $json.body.photo }}",
              "type": "string"
            },
            {
              "id": "3ccd9ed9-d315-4b5c-b1d1-84d22fee88f2",
              "name": "body.image",
              "value": "={{ $json.body.image }}",
              "type": "object"
            },
            {
              "id": "19aae071-e4db-43f8-940e-f315dc43cd16",
              "name": "body.image.imageUrl",
              "value": "={{ $json.body.image.imageUrl }}",
              "type": "string"
            },
            {
              "id": "3bf4069e-8ae4-4d15-9bd9-4ff679a84f5d",
              "name": "body.image.thumbnailUrl",
              "value": "={{ $json.body.image.thumbnailUrl }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        60,
        380
      ],
      "id": "1c34a1c7-ffe7-459d-848d-40eb50463840",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -200,
        780
      ],
      "id": "5c1f9dff-54b5-44a6-8335-4a5b3602115b",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "dados_subworkflow",
        "filters": {
          "conditions": [
            {
              "keyName": "telefone_usuario",
              "keyValue": "={{ $execution.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        20,
        780
      ],
      "id": "7f2a0384-5686-47f0-8bb0-4f6a87a8f74a",
      "name": "Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "vbkKtR4gnK3Q013f",
          "name": "Supabase account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Code": {
      "main": [
        [
          {
            "node": "barcode-scanner1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cdn-image": {
      "main": [
        []
      ]
    },
    "barcode-scanner1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "On form submission": {
      "main": [
        []
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "MongoDB",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "gpt-api",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "gpt-api": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        []
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a0d73110-bb07-4a87-9a5d-69866f6fdd66",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "47f5151e1feedfc56c8165323ec3b572b376ad9a1737b53f18d620111e7cf651"
  },
  "id": "S4lBUlj6RB91UodT",
  "tags": []
}