{
  "name": "barcode_workflow",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "906511c9-457d-4610-961d-d817039a350c",
              "name": "body.messageId",
              "value": "={{ $('Webhook1').item.json.body.messageId }}",
              "type": "string"
            },
            {
              "id": "59f45bf0-18d5-408d-bb51-448d2afccbc7",
              "name": "body.phone",
              "value": "={{ $('Webhook1').item.json.body.phone }}",
              "type": "string"
            },
            {
              "id": "df0f1137-3fa2-4fbc-81e9-8e4d1dace7c0",
              "name": "body.chatName",
              "value": "={{ $('Webhook1').item.json.body.chatName }}",
              "type": "string"
            },
            {
              "id": "aed460bc-bec5-4e9a-8c55-45247dc3478f",
              "name": "body.photo",
              "value": "={{ $('Webhook1').item.json.body.photo }}",
              "type": "string"
            },
            {
              "id": "3ccd9ed9-d315-4b5c-b1d1-84d22fee88f2",
              "name": "body.image",
              "value": "={{ $('Webhook1').item.json.body.image }}",
              "type": "object"
            },
            {
              "id": "19aae071-e4db-43f8-940e-f315dc43cd16",
              "name": "body.image.imageUrl",
              "value": "={{ $('Webhook1').item.json.body.image.imageUrl }}",
              "type": "string"
            },
            {
              "id": "3bf4069e-8ae4-4d15-9bd9-4ff679a84f5d",
              "name": "body.image.thumbnailUrl",
              "value": "={{ $('Webhook1').item.json.body.image.thumbnailUrl }}",
              "type": "string"
            },
            {
              "id": "a54c2772-da1c-4311-966c-44a4c9adf188",
              "name": "body.text",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3520,
        672
      ],
      "id": "49eede9f-9753-4568-b90d-77b4a1fb1181",
      "name": "Edit Fields1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "44b25479-1cf5-4edc-8c21-cc62fc7d91da",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -4624,
        672
      ],
      "id": "0685cc99-4703-417a-bb9f-7bfb3c225e3c",
      "name": "Webhook1",
      "webhookId": "44b25479-1cf5-4edc-8c21-cc62fc7d91da"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://barcode-scanner-production.up.railway.app/detect-flexible",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 91c4c1f5-e612-4718-8d08-4777e73d8a15"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "image_url",
              "value": "={{ $('Webhook1').item.json.body.image.imageUrl }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        544,
        320
      ],
      "id": "558a7749-f006-442f-b247-4fdc980bd8ef",
      "name": "barcode-scanner1",
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// O item de entrada agora cont√©m a resposta da API Open Food Facts\nconst item = items[0];\nconst product = item.json.product;\n\n// 1. Verifica se o produto foi encontrado e tem dados nutricionais\nif (!product || !product.nutriments) {\n  // Se n√£o encontrou, podemos retornar um item vazio para que o fluxo pare aqui ou siga um caminho de erro\n  item.json.prompt = \"Produto n√£o encontrado em nossa base de dados. Gostaria de tentar analisar pela foto?\";\n  return item;\n}\n\n// 2. Extrai os dados nutricionais do produto\nconst nutriments = product.nutriments;\nconst productName = product.product_name_pt || product.product_name || \"Produto sem nome\";\n\n// Pega a por√ß√£o em gramas (se dispon√≠vel, sen√£o assume 100g)\nconst porcao = Number(product.serving_size?.replace(/[^0-9.]/g, '')) || 100;\n\n// Pega os macros por 100g\nconst fat100 = Number(nutriments['fat_100g']) || 0;\nconst carb100 = Number(nutriments['carbohydrates_100g']) || 0;\nconst prot100 = Number(nutriments['proteins_100g']) || 0;\n\n// 3. Calcula os valores para a por√ß√£o espec√≠fica do produto\nconst fator = porcao / 100;\nconst gordPorcao = +(fat100 * fator).toFixed(1);\nconst carbPorcao = +(carb100 * fator).toFixed(1);\nconst protPorcao = +(prot100 * fator).toFixed(1);\n\n// 4. Calcula as calorias da por√ß√£o\nconst kcal = Math.round((gordPorcao * 9) + (carbPorcao * 4) + (protPorcao * 4));\n\n// 5. Monta a mensagem final para o usu√°rio\nconst prompt = `Encontrei: ${productName}!\\n\\nUma por√ß√£o de ${porcao}g tem aproximadamente:\\nüî• Calorias: ~${kcal} kcal\\nüåæ Carboidratos: ~${carbPorcao}g\\nüí™ Prote√≠nas: ~${protPorcao}g\\nü•ë Gorduras: ~${gordPorcao}g\\n\\nDeseja adicionar ao seu di√°rio? (sim/n√£o)`;\n\n// Anexa a nova mensagem (prompt) ao item e o retorna\nitem.json.prompt = prompt;\nreturn item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1200,
        128
      ],
      "id": "e2d0176f-0a9f-4c46-af25-19d3a148acfc",
      "name": "Code1"
    },
    {
      "parameters": {
        "collection": "products",
        "options": {},
        "query": "={\"code\": \"{{ $json.data.barcodeValue }}\"}"
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [
        704,
        -256
      ],
      "id": "574102f9-1aea-4053-a67b-c462f87a6e84",
      "name": "MongoDB"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Code2').item.json.imageUrl }}",
                    "rightValue": "={{ null }}",
                    "operator": {
                      "type": "string",
                      "operation": "notEquals"
                    },
                    "id": "339fe544-e0ad-4616-95e4-e3ea4f827f06"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Image"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "da1a564a-5c9b-48f8-ad18-da4df85d58cf",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "=Pending",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Response"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "95820790-3755-4e65-b02b-0d517829ce4d",
                    "leftValue": "={{ $('Code2').item.json.message }}",
                    "rightValue": "={{ null }}",
                    "operator": {
                      "type": "string",
                      "operation": "notEquals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1456,
        1120
      ],
      "id": "d7d7f75d-4020-46db-9e0c-1ce5eb2ed238",
      "name": "Switch",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Se a resposta for positiva, registre no Supabase o seguinte conte√∫do:\n\nMensagem do usu√°rio: {{ $('Code2').item.json.message }}\n\nPergunta correspondente: {{ $json.question }}\n\nUtilize esses dois campos como base para o registro no banco de dados.",
        "options": {
          "systemMessage": "A partir da mensagem escrita pelo usu√°rio, extraia:\n\n- nome do alimento ou refei√ß√£o\n- valor estimado de calorias\n- quantidade de prote√≠nas, carboidratos e gorduras\n\nUse esses dados para preencher uma linha da tabela `registros_alimentares` no Supabase.\n\nRetorne apenas o corpo do JSON a ser enviado por POST para o endpoint REST do Supabase:\n\n```json\n{\n  \"nome_alimento\": \"<nome do alimento>\",\n  \"calorias\": <valor em kcal>,\n  \"carboidratos\": <gramas>,\n  \"proteinas\": <gramas>,\n  \"gorduras\": <gramas>\n}\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        2384,
        1280
      ],
      "id": "0375ac26-5dad-4eb7-a7c7-9aaa1bde90ed",
      "name": "AI Agent",
      "executeOnce": true
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "tableId": "registros_alimentares",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "usuario_id",
              "fieldValue": "={{ $('get-user-id').item.json.id }}"
            },
            {
              "fieldId": "nome_alimento",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('fieldValues1_Field_Value', ``, 'string') }}"
            },
            {
              "fieldId": "calorias",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('fieldValues2_Field_Value', ``, 'string') }}"
            },
            {
              "fieldId": "proteinas",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('fieldValues3_Field_Value', ``, 'string') }}"
            },
            {
              "fieldId": "gorduras",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('fieldValues4_Field_Value', ``, 'string') }}"
            },
            {
              "fieldId": "carboidratos",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('fieldValues6_Field_Value', ``, 'string') }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        2544,
        1504
      ],
      "id": "f16e33ef-b698-4045-acbf-498f22bdbc77",
      "name": "Supabase2",
      "credentials": {
        "supabaseApi": {
          "id": "aLPCtqdgRYyrwtIH",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2432,
        1504
      ],
      "id": "db47eb37-9946-4bb0-ae01-18b381d214a0",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "OSiXiaMjcby4EcIk",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "pending_questions",
        "filters": {
          "conditions": [
            {
              "keyName": "phone",
              "condition": "eq",
              "keyValue": "={{ $('get-message').item.json.phone }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        3200,
        1392
      ],
      "id": "cf0bafe6-f2d0-414e-8de5-1e193644da5c",
      "name": "Supabase4",
      "credentials": {
        "supabaseApi": {
          "id": "aLPCtqdgRYyrwtIH",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/3E1D888E8D8DE07F56022E7FADD21987/token/ED2BF32A855B887106BAAD09/send-text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "client-token",
              "value": "F60d85846fe6a4bfd986f72916b85da2fS"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $('Webhook1').item.json.body.phone }}"
            },
            {
              "name": "message",
              "value": "=Item adicionado ao log"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2768,
        1392
      ],
      "id": "af47883e-7057-4ad7-a8fa-b664af032955",
      "name": "HTTP Request3"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/3E1D888E8D8DE07F56022E7FADD21987/token/ED2BF32A855B887106BAAD09/send-text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "client-token",
              "value": "F60d85846fe6a4bfd986f72916b85da2fS"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $('Webhook1').item.json.body.phone }}"
            },
            {
              "name": "message",
              "value": "=Posso te ajudar de uma outra forma?"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2992,
        1392
      ],
      "id": "d5bf0f71-069c-4e62-83ff-1d346246b5a4",
      "name": "HTTP Request4"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Code2').item.json.message }}",
        "options": {
          "systemMessage": "Voc√™ √© uma nutricionista virtual altamente qualificada, com conhecimento avan√ßado em nutri√ß√£o, bioqu√≠mica, diet√©tica, sa√∫de metab√≥lica e h√°bitos alimentares.\n\nSeu papel √© orientar, educar e responder √†s d√∫vidas dos usu√°rios com base em evid√™ncias cient√≠ficas, usando uma linguagem amig√°vel, clara e adaptada ao p√∫blico geral.\n\n### Seu tom:\n- Profissional, mas acolhedor\n- Did√°tico, sem ser t√©cnico demais\n- Sem julgamentos ou imposi√ß√µes\n- Motivacional, quando apropriado\n\n### Seu objetivo:\nAjudar o usu√°rio a compreender melhor a alimenta√ß√£o, tomar decis√µes mais conscientes e manter uma rela√ß√£o saud√°vel com a comida.\n\n### Voc√™ pode:\n- Explicar diferen√ßas entre alimentos (ex: arroz branco vs integral)\n- Avaliar escolhas alimentares (ex: ‚Äúcomi p√£o √† noite, √© ruim?‚Äù)\n- Estimar calorias e macronutrientes de refei√ß√µes\n- Sugerir substitui√ß√µes mais saud√°veis\n- Explicar conceitos como √≠ndice glic√™mico, d√©ficit cal√≥rico, jejum intermitente, etc.\n- Ajudar com metas como emagrecimento, ganho de massa ou alimenta√ß√£o consciente\n\n### Voc√™ n√£o pode:\n- Prescrever dietas espec√≠ficas ou recomendar suplementa√ß√£o medicamentosa\n- Fazer diagn√≥stico m√©dico\n- Repreender o usu√°rio\n\nSempre responda de forma humanizada, emp√°tica e fundamentada. Se n√£o tiver dados suficientes para responder com confian√ßa, diga isso com honestidade e oriente o usu√°rio a procurar um nutricionista humano presencial.\n\nExemplos de respostas:\n- \"Essa escolha pode ser boa dependendo do seu objetivo! Posso te explicar as diferen√ßas.\"\n- \"Sim, arroz integral tem mais fibras, o que ajuda na saciedade.\"\n- \"Se quiser perder peso, o ideal √© manter um d√©ficit cal√≥rico. Posso te ajudar a entender isso melhor.\"\n\n‚ö†Ô∏è Voc√™ est√° aqui para **educar e apoiar**, nunca para julgar.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        144,
        2432
      ],
      "id": "6a50ca2a-a45a-4d35-bc74-5c2ddf19369c",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        240,
        2640
      ],
      "id": "6517b2e0-067a-4f18-b8ee-53fd4b4f576c",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "OSiXiaMjcby4EcIk",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/3E1D888E8D8DE07F56022E7FADD21987/token/ED2BF32A855B887106BAAD09/send-text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "client-token",
              "value": "F60d85846fe6a4bfd986f72916b85da2fS"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $('Webhook1').item.json.body.phone }}"
            },
            {
              "name": "message",
              "value": "={{ $json.output }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        528,
        2432
      ],
      "id": "97651505-0202-4756-86c6-30d46f3bc999",
      "name": "HTTP Request5"
    },
    {
      "parameters": {
        "content": "## Workflow de processamento de imagem\n",
        "height": 760,
        "width": 2080,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1,
      "id": "ebab4f06-f2ba-4fa9-b7f3-9bb56b1f5397",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/3E1D888E8D8DE07F56022E7FADD21987/token/ED2BF32A855B887106BAAD09/send-text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "client-token",
              "value": "F60d85846fe6a4bfd986f72916b85da2fS"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $('Webhook1').item.json.body.phone }}"
            },
            {
              "name": "message",
              "value": "={{ $json.originalMessage }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1648,
        320
      ],
      "id": "9fed1fc7-4f42-4dfc-9ce4-a2b63af63722",
      "name": "Http Request retorna Mensagem para Wpp"
    },
    {
      "parameters": {
        "tableId": "pending_questions",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "phone",
              "fieldValue": "={{ $('Edit Fields1').item.json.body.phone }}"
            },
            {
              "fieldId": "question",
              "fieldValue": "={{ $('gpt-api-com-msg').item.json.choices[0].message.content }}"
            },
            {
              "fieldId": "status",
              "fieldValue": "Pending"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1872,
        320
      ],
      "id": "d64ca970-52ff-4dd0-95fc-cc84c7a1417c",
      "name": "Supabase cria pending request",
      "credentials": {
        "supabaseApi": {
          "id": "aLPCtqdgRYyrwtIH",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/3E1D888E8D8DE07F56022E7FADD21987/token/ED2BF32A855B887106BAAD09/send-text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "client-token",
              "value": "F60d85846fe6a4bfd986f72916b85da2fS"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $('Webhook1').item.json.body.phone }}"
            },
            {
              "name": "message",
              "value": "={{ $json.prompt }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1424,
        128
      ],
      "id": "f12e6cf0-b786-431c-8234-4fe1fc66bff5",
      "name": "HTTP Request retorna macros para wpp"
    },
    {
      "parameters": {
        "content": "## Adiciona ao log a refei√ß√£o",
        "height": 780,
        "width": 3160
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        432,
        1232
      ],
      "typeVersion": 1,
      "id": "543805f9-2990-480f-98a0-5e752c45f763",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Agente conversacional",
        "height": 440,
        "width": 860,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -224,
        2352
      ],
      "typeVersion": 1,
      "id": "2b1030c8-34b3-4fd0-a49e-2d61de751a10",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "operation": "push",
        "list": "={{ $json.body.phone }}",
        "messageData": "={{ JSON.stringify({ \n  ...$json.body, \n  timestamp: Date.now(),\n  created_at: new Date().toISOString()\n}) }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -3296,
        672
      ],
      "id": "4ac3564e-c647-4a6d-adde-c838415e0b54",
      "name": "Redis",
      "credentials": {
        "redis": {
          "id": "8lPSoYKsgLs7EFjk",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "key": "={{ $('Edit Fields1').item.json.body.phone }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -2560,
        1360
      ],
      "id": "ee53437e-41df-4cf4-bf46-b5c003275509",
      "name": "Redis1",
      "credentials": {
        "redis": {
          "id": "8lPSoYKsgLs7EFjk",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $('Code2').item.json.phoneNumber }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1680,
        1120
      ],
      "id": "7be66646-ee04-4f99-b872-9c6197b64809",
      "name": "Redis2",
      "credentials": {
        "redis": {
          "id": "8lPSoYKsgLs7EFjk",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -2128,
        1392
      ],
      "id": "1c3560ab-d780-48da-8ef4-3e5aa3fed0dc",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -1456,
        1568
      ],
      "id": "09aa4ee6-7dd6-47cc-ac1e-e909166b12ed",
      "name": "Wait",
      "webhookId": "9b707558-3123-45cd-83ad-5a5d2406db17"
    },
    {
      "parameters": {
        "jsCode": "const rawMessages = $input.first().json.propertyName;\n\n// 1. Parsear as strings JSON, filtrando as que forem inv√°lidas\nconst parsed = rawMessages\n  .map(str => {\n    try { return JSON.parse(str); }\n    catch { return null; }\n  })\n  .filter(Boolean);\n\n// 2. Encontrar a URL da imagem mais recente.\n// A sua l√≥gica est√° correta, pois o array j√° vem ordenado do mais novo para o mais antigo.\n// O primeiro item com imagem que o loop encontrar ser√° o mais recente.\nlet latestImageUrl = null;\nfor (const msg of parsed) {\n  if (msg.image?.imageUrl) {\n    latestImageUrl = msg.image.imageUrl;\n    break; // Encontrou a mais recente, pode parar o loop\n  }\n}\n\n// 3. Extrair um √∫nico n√∫mero de telefone (s√£o todos iguais)\nconst phoneNumber = parsed.length > 0 ? parsed[0].phone : null;\n\n// 4. Concatenar todas as mensagens de texto da MAIS ANTIGA para a MAIS NOVA\nconst message = [...parsed] // Cria uma c√≥pia para n√£o alterar o array 'parsed'\n  .reverse() // Inverte para ordenar da mais antiga para a mais nova\n  .map(msg => {\n    // L√ìGICA CORRIGIDA: Verifica a estrutura {\"text\": {\"message\": \"...\"}}\n    if (msg.text?.message) {\n      return msg.text.message;\n    }\n    // Mant√©m a verifica√ß√£o para outras poss√≠veis estruturas\n    if (typeof msg.text === 'string') {\n      return msg.text;\n    }\n    return ''; // Retorna string vazia para mensagens sem texto (ex: s√≥ imagem)\n  })\n  .filter(text => text) // Remove as strings vazias\n  .join(' '); // Junta todas as mensagens com um espa√ßo\n\n// 5. Retornar o objeto final\nreturn [{\n  json: {\n    message: message || null, // Retorna a string ou nulo se n√£o houver mensagens\n    imageUrl: latestImageUrl,\n    phoneNumber: phoneNumber\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2128,
        1120
      ],
      "id": "d761cbbb-0646-49f1-ae44-2fdce30a9eab",
      "name": "Code2"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "pending_questions",
        "filters": {
          "conditions": [
            {
              "keyName": "phone",
              "keyValue": "={{ $json.phoneNumber }}"
            },
            {
              "keyName": "status",
              "keyValue": "Pending"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1904,
        1120
      ],
      "id": "a4d06d05-c910-44f1-8274-7d8b419bb532",
      "name": "Supabase",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "aLPCtqdgRYyrwtIH",
          "name": "Supabase account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.propertyName.length }}",
                    "rightValue": 5,
                    "operator": {
                      "type": "number",
                      "operation": "gte"
                    },
                    "id": "9f965796-dc0d-494a-9230-073bd8817904"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ JSON.parse($json.propertyName[0]).timestamp }}",
                    "rightValue": "={{ Date.now() - 5000 }}",
                    "operator": {
                      "type": "number",
                      "operation": "lte"
                    },
                    "id": "eeebb6dc-eb66-44fd-ae07-f0fc7470039e"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2336,
        1280
      ],
      "id": "181e4cfc-86d7-4ad5-9283-8e30c8b86c5f",
      "name": "Switch2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/3E1D888E8D8DE07F56022E7FADD21987/token/ED2BF32A855B887106BAAD09/send-text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "client-token",
              "value": "F60d85846fe6a4bfd986f72916b85da2fS"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $('Code2').item.json.phoneNumber }}"
            },
            {
              "name": "message",
              "value": "={{ $json.correctedMessage }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1648,
        528
      ],
      "id": "2fb82785-9844-410c-afd5-a4efef5a1b3d",
      "name": "Http Request retorna Mensagem para Wpp1"
    },
    {
      "parameters": {
        "tableId": "pending_questions",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "phone",
              "fieldValue": "={{ $('Edit Fields1').item.json.body.phone }}"
            },
            {
              "fieldId": "question",
              "fieldValue": "={{ $('Code').item.json.correctedMessage }}"
            },
            {
              "fieldId": "status",
              "fieldValue": "Pending"
            },
            {
              "fieldId": "calories",
              "fieldValue": "={{ $('Code').item.json.calories.calculated }}"
            },
            {
              "fieldId": "protein",
              "fieldValue": "={{ $('Code').item.json.nutritionalBreakdown.proteins.grams }}"
            },
            {
              "fieldId": "carbs",
              "fieldValue": "={{ $('Code').item.json.nutritionalBreakdown.carbs.grams }}"
            },
            {
              "fieldId": "fat",
              "fieldValue": "={{ $('Code').item.json.nutritionalBreakdown.fats.grams }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1872,
        528
      ],
      "id": "1c426cd0-0e2c-4870-819c-2d3878658daa",
      "name": "Supabase cria pending request1",
      "credentials": {
        "supabaseApi": {
          "id": "aLPCtqdgRYyrwtIH",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/3E1D888E8D8DE07F56022E7FADD21987/token/ED2BF32A855B887106BAAD09/send-text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "client-token",
              "value": "F60d85846fe6a4bfd986f72916b85da2fS"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $('Webhook1').item.json.body.phone }}"
            },
            {
              "name": "message",
              "value": "Deseja adicionar esta refei√ß√£o ao log?"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2080,
        528
      ],
      "id": "579075d4-cc75-440e-b672-a8686171a652",
      "name": "Http Request retorna Mensagem para Wpp2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/3E1D888E8D8DE07F56022E7FADD21987/token/ED2BF32A855B887106BAAD09/send-text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "client-token",
              "value": "F60d85846fe6a4bfd986f72916b85da2fS"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $('Webhook1').item.json.body.phone }}"
            },
            {
              "name": "message",
              "value": "Deseja adicionar esta refei√ß√£o ao log?"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2080,
        320
      ],
      "id": "40e297f1-fbed-413a-8955-12b3450e037d",
      "name": "Http Request retorna Mensagem para Wpp3"
    },
    {
      "parameters": {
        "jsCode": "const currentCounter = parseInt($execution.customData.get('counter') || '0');\n$execution.customData.set('counter', (currentCounter + 1).toString());\n\nreturn {\n  json: {\n    counter: currentCounter + 1,\n    item: $input.first().json // pass through your loop data\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1904,
        1392
      ],
      "id": "3566985b-0302-4565-b7a5-9d70f6a10cd2",
      "name": "Code3"
    },
    {
      "parameters": {
        "jsCode": "$execution.customData.set('counter', '0');\n\nreturn {\n  json: {\n    message: \"Counter initialized to 0\"\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2864,
        672
      ],
      "id": "d9ed5b3c-133e-41bf-90ea-74113a5ae405",
      "name": "Code4"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "22851519-e7dc-462d-bd72-cf4956fdda3b",
              "leftValue": "={{ $json.counter }}",
              "rightValue": 5,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1680,
        1392
      ],
      "id": "3e2d642e-2f42-47c7-9071-2dbe72caa49d",
      "name": "If2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -1456,
        1328
      ],
      "id": "00b3436e-afa6-4eb5-8b5e-2524805b95fd",
      "name": "No Operation, do nothing1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/3E1D888E8D8DE07F56022E7FADD21987/token/ED2BF32A855B887106BAAD09/send-text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "client-token",
              "value": "F60d85846fe6a4bfd986f72916b85da2fS"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $('Webhook1').item.json.body.phone }}"
            },
            {
              "name": "message",
              "value": "Calculando..."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        320,
        320
      ],
      "id": "8a8df69a-ef6c-4140-a027-03262957173a",
      "name": "Http Request retorna Mensagem para Wpp4"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/3E1D888E8D8DE07F56022E7FADD21987/token/ED2BF32A855B887106BAAD09/send-text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "client-token",
              "value": "F60d85846fe6a4bfd986f72916b85da2fS"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $('Webhook1').item.json.body.phone }}"
            },
            {
              "name": "message",
              "value": "Adicionando..."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        704,
        1520
      ],
      "id": "95fb9986-1941-4ed9-a3f0-0be23fb904cd",
      "name": "Http Request retorna Mensagem para Wpp5"
    },
    {
      "parameters": {
        "tableId": "workflow_locks",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "phone",
              "fieldValue": "={{ $json.body.phone }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -3088,
        672
      ],
      "id": "0e42b9a1-e983-46fb-9b7f-628f1a32ad1a",
      "name": "Supabase1",
      "credentials": {
        "supabaseApi": {
          "id": "aLPCtqdgRYyrwtIH",
          "name": "Supabase account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "users",
        "filters": {
          "conditions": [
            {
              "keyName": "telefone",
              "keyValue": "={{ $('Switch').item.json.phone }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1280,
        1520
      ],
      "id": "0e7bdec7-d4ae-4d35-b0c7-5d5fa89be73c",
      "name": "get-user-id",
      "credentials": {
        "supabaseApi": {
          "id": "aLPCtqdgRYyrwtIH",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "pending_questions",
        "filters": {
          "conditions": [
            {
              "keyName": "phone",
              "condition": "eq",
              "keyValue": "={{ $json.telefone }}"
            },
            {
              "keyName": "status",
              "condition": "eq",
              "keyValue": "Pending "
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "status",
              "fieldValue": "Processing "
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1504,
        1520
      ],
      "id": "e70aee47-9c5e-46c4-a3fa-3ea1d108ad1a",
      "name": "get-message",
      "credentials": {
        "supabaseApi": {
          "id": "aLPCtqdgRYyrwtIH",
          "name": "Supabase account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "46a2307b-f116-48e2-9f4e-eb005e607b57",
              "leftValue": "={{  $items(\"get-message\").length}}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1728,
        1520
      ],
      "id": "92a9e4a0-59f0-49ad-9385-46b358a3b61e",
      "name": "If3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fe7f54a7-9972-464c-b84d-7903a0b558db",
              "leftValue": "={{ $json.calories }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "notExists",
                "singleValue": true
              }
            },
            {
              "id": "882e3255-e64d-40fc-8093-fd62617c6b4b",
              "leftValue": "={{ $json.carbs }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "notExists",
                "singleValue": true
              }
            },
            {
              "id": "755cbeea-5327-4f5d-aa10-7437588a54d2",
              "leftValue": "={{ $json.proteins }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "notExists",
                "singleValue": true
              }
            },
            {
              "id": "91456a8b-2bb1-480f-8b2f-861c040c658f",
              "leftValue": "={{ $json.fats }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2160,
        1520
      ],
      "id": "beb7cb30-515f-425f-856f-76cefa857a22",
      "name": "If4"
    },
    {
      "parameters": {
        "tableId": "registros_alimentares",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "usuario_id",
              "fieldValue": "={{ $json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2768,
        1680
      ],
      "id": "e78bfd23-043e-48bb-86c7-f60e7aa6e129",
      "name": "Supabase3",
      "credentials": {
        "supabaseApi": {
          "id": "aLPCtqdgRYyrwtIH",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "users",
        "filters": {
          "conditions": [
            {
              "keyName": "telefone",
              "keyValue": "={{ $json.phone }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2464,
        1680
      ],
      "id": "5dc42da9-8126-462e-a7c1-8f3985557b49",
      "name": "Supabase5",
      "credentials": {
        "supabaseApi": {
          "id": "aLPCtqdgRYyrwtIH",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "function determineMealType(currentTime, existingMeals) {\n  const timeToMinutes = (timeStr) => {\n    if (!timeStr || typeof timeStr !== 'string') {\n      return 0; // Default to midnight if invalid\n    }\n    const [hours, minutes] = timeStr.split(':').map(Number);\n    return hours * 60 + minutes;\n  };\n  \n  const currentMinutes = timeToMinutes(currentTime);\n  const morningCutoff = 11 * 60 + 30; // 11:30\n  const afternoonCutoff = 18 * 60 + 30; // 18:30\n  \n  let mealType;\n  \n  if (currentMinutes < morningCutoff) {\n    // Morning period\n    const morningMeals = existingMeals.filter(meal => {\n      if (!meal || !meal.hora_consumo) return false;\n      const mealMinutes = timeToMinutes(meal.hora_consumo);\n      return mealMinutes < morningCutoff;\n    });\n    \n    const count = morningMeals.length + 1;\n    mealType = count === 1 ? 'cafe da manha' : `lanche da manha ${count - 1}`;\n    \n  } else if (currentMinutes < afternoonCutoff) {\n    // Afternoon period\n    const afternoonMeals = existingMeals.filter(meal => {\n      if (!meal || !meal.hora_consumo) return false;\n      const mealMinutes = timeToMinutes(meal.hora_consumo);\n      return mealMinutes >= morningCutoff && mealMinutes < afternoonCutoff;\n    });\n    \n    const count = afternoonMeals.length + 1;\n    mealType = count === 1 ? 'almoco' : `lanche da tarde ${count - 1}`;\n    \n  } else {\n    // Evening period\n    const eveningMeals = existingMeals.filter(meal => {\n      if (!meal || !meal.hora_consumo) return false;\n      const mealMinutes = timeToMinutes(meal.hora_consumo);\n      return mealMinutes >= afternoonCutoff;\n    });\n    \n    const count = eveningMeals.length + 1;\n    mealType = count === 1 ? 'janta' : `lanche da noite ${count - 1}`;\n  }\n  \n  return mealType;\n}\n\n// Get data from previous nodes using correct n8n syntax\nconst nutritionData = $('nutrition-extractor').first().json;\nconst existingMealsData = $('Supabase3').first().json;\n\n// Get current time in Brazil timezone (UTC-3)\nconst now = new Date();\nconst brazilTime = new Date(now.getTime() - (3 * 60 * 60 * 1000)); // UTC-3\nconst currentTime = brazilTime.toTimeString().split(' ')[0].substring(0, 5);\n\n// Handle the case where existingMealsData might be an array or single object\nlet existingMeals = [];\nif (Array.isArray(existingMealsData)) {\n  existingMeals = existingMealsData;\n} else if (existingMealsData) {\n  existingMeals = [existingMealsData];\n}\n\nconst mealType = determineMealType(currentTime, existingMeals);\n\nreturn [{\n  json: {\n    ...nutritionData,\n    tipo_refeicao: mealType,\n    data_consumo: new Date().toISOString().split('T')[0],\n    hora_consumo: currentTime\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2992,
        1680
      ],
      "id": "5e6c100f-7279-41c4-99cd-b2307c0aa6c4",
      "name": "Code5"
    },
    {
      "parameters": {
        "jsCode": "function extractNutrition(text) {\n  const nutrition = {\n    calories: 0,\n    carbs: 0,\n    proteins: 0,\n    fats: 0\n  };\n  \n  // Check if text exists and is a string\n  if (!text || typeof text !== 'string') {\n    return nutrition;\n  }\n  \n  // Calories patterns\n  const caloriesRegex = /(?:calorias?|kcal|energia)\\s*:?\\s*~?(\\d+(?:[.,]\\d+)?)/i;\n  const caloriesMatch = text.match(caloriesRegex);\n  if (caloriesMatch) nutrition.calories = parseFloat(caloriesMatch[1].replace(',', '.'));\n  \n  // Carbs patterns\n  const carbsRegex = /(?:carboidratos?|carbs?)\\s*:?\\s*~?(\\d+(?:[.,]\\d+)?)g?/i;\n  const carbsMatch = text.match(carbsRegex);\n  if (carbsMatch) nutrition.carbs = parseFloat(carbsMatch[1].replace(',', '.'));\n  \n  // Proteins patterns\n  const proteinsRegex = /(?:prote√≠nas?|proteins?)\\s*:?\\s*~?(\\d+(?:[.,]\\d+)?)g?/i;\n  const proteinsMatch = text.match(proteinsRegex);\n  if (proteinsMatch) nutrition.proteins = parseFloat(proteinsMatch[1].replace(',', '.'));\n  \n  // Fats patterns\n  const fatsRegex = /(?:gorduras?|fats?|lip√≠dios?)\\s*:?\\s*~?(\\d+(?:[.,]\\d+)?)g?/i;\n  const fatsMatch = text.match(fatsRegex);\n  if (fatsMatch) nutrition.fats = parseFloat(fatsMatch[1].replace(',', '.'));\n  \n  return nutrition;\n}\n\n// Get the question field from your JSON input\nconst message = $input.first().json.question;\n\n// Extract nutrition data\nconst extractedData = extractNutrition(message);\n\nreturn [{\n  json: {\n    ...extractedData,\n    original_message: message,\n    extraction_method: 'regex',\n    extracted_at: new Date().toISOString(),\n    // Keep original data for reference\n    id: $input.first().json.id,\n    phone: $input.first().json.phone,\n    status: $input.first().json.status\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1952,
        1520
      ],
      "id": "73e7bc12-8fd2-47e0-98bd-4efbe3a435d3",
      "name": "nutrition-extractor"
    },
    {
      "parameters": {
        "inputText": "={{ $('Switch').item.json.question }}",
        "options": {
          "categories": "Positive, Neutral, Negative"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.sentimentAnalysis",
      "typeVersion": 1,
      "position": [
        912,
        1632
      ],
      "id": "3a627e40-d917-40e9-92d7-990e4d82436e",
      "name": "Sentiment Analysis"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        832,
        1840
      ],
      "id": "b8480e6a-b2b3-46c5-89b3-0d15b72524cd",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "OSiXiaMjcby4EcIk",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "pending_questions",
        "filters": {
          "conditions": [
            {
              "keyName": "phone",
              "condition": "eq",
              "keyValue": "={{ $('Switch').item.json.phone }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1328,
        1872
      ],
      "id": "a8d3e3a9-6f42-4abe-b3e6-2915bd132ac3",
      "name": "Supabase6",
      "credentials": {
        "supabaseApi": {
          "id": "aLPCtqdgRYyrwtIH",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "registros_alimentares",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "usuario_id",
              "fieldValue": "={{ $('Supabase3').item.json.usuario_id }}"
            },
            {
              "fieldId": "data_consumo",
              "fieldValue": "={{ $json.data_consumo }}"
            },
            {
              "fieldId": "hora_consumo",
              "fieldValue": "={{ $json.hora_consumo }}"
            },
            {
              "fieldId": "calorias",
              "fieldValue": "={{ $json.calories }}"
            },
            {
              "fieldId": "carboidratos",
              "fieldValue": "={{ $json.carbs }}"
            },
            {
              "fieldId": "proteinas",
              "fieldValue": "={{ $json.proteins }}"
            },
            {
              "fieldId": "gorduras",
              "fieldValue": "={{ $json.fats }}"
            },
            {
              "fieldId": "tipo_refeicao",
              "fieldValue": "={{ $json.tipo_refeicao }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        3200,
        1680
      ],
      "id": "e0068b4d-ae96-492d-971f-8899e5255f50",
      "name": "Supabase7",
      "credentials": {
        "supabaseApi": {
          "id": "aLPCtqdgRYyrwtIH",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "pending_questions",
        "filters": {
          "conditions": [
            {
              "keyName": "phone",
              "condition": "eq",
              "keyValue": "={{ $('Supabase5').item.json.telefone }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        3584,
        1680
      ],
      "id": "7a25d03f-55c2-463f-bcc4-7905f9814270",
      "name": "Supabase8",
      "credentials": {
        "supabaseApi": {
          "id": "aLPCtqdgRYyrwtIH",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/3E1D888E8D8DE07F56022E7FADD21987/token/ED2BF32A855B887106BAAD09/send-text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "client-token",
              "value": "F60d85846fe6a4bfd986f72916b85da2fS"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $('Webhook1').item.json.body.phone }}"
            },
            {
              "name": "message",
              "value": "=Item adicionado ao log"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3408,
        1680
      ],
      "id": "50e85e32-0a32-4562-ac31-e1770b51064c",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e61db71f-6cc8-4eac-8e8d-2f31e18b6a83",
              "leftValue": "={{ $json.data.barcodeValue }}",
              "rightValue": "=",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        768,
        320
      ],
      "id": "019b9e97-8fc3-4d3d-8a1a-86db1e9b7fe5",
      "name": "If-chaca-barcode"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b99fd8fd-a371-42d8-a4a1-6cf909484252",
              "leftValue": "={{ $('Code2').item.json.message }}",
              "rightValue": "={{null}}",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        992,
        432
      ],
      "id": "e09326d9-66d8-446f-a0cf-798d5b80317e",
      "name": "If-checa-mensagem"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 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"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"gpt-4o\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"*Prompt para An√°lise Nutricional - Logger de Comida*\\n\\nVoc√™ √© um nutricionista virtual especialista em an√°lise de pratos via WhatsApp. Ao receber a imagem de uma refei√ß√£o, siga rigorosamente este processo:\\n\\n---\\n\\n**PASSO 1: IDENTIFICA√á√ÉO DO PRATO**\\n- Liste cada alimento vis√≠vel na foto\\n- Estime o peso aproximado de cada item em gramas (g)\\n- Use por√ß√µes t√≠picas e bom senso visual\\n\\n**PASSO 2: C√ÅLCULO NUTRICIONAL DETALHADO**\\nPara cada alimento identificado, informe os seguintes valores por 100g:\\n- Calorias (kcal)\\n- Carboidratos (g)\\n- Prote√≠nas (g)\\n- Gorduras (g)\\n\\n**PASSO 3: C√ÅLCULO TOTAL PROPORCIONAL**\\nCom base na estimativa de peso, calcule os macros e calorias proporcionais de cada item e fa√ßa a soma total da refei√ß√£o.\\n\\n**PASSO 4: RESPOSTA FINAL - FORMATO WHATSAPP**\\nA resposta final deve ser leve, amig√°vel e com emojis. Siga este formato EXATO de exemplo:\\n\\n---\\n\\n*Exemplo de resposta desejada:*\\n\\n\\\"Que prato gostoso! Vejo aqui arroz branco (~150g) e carne mo√≠da com molho (~100g).\\n\\n**Resumo nutricional:**\\nüî• Calorias: ~556 kcal\\nüåæ Carboidratos: ~50g\\nüí™ Prote√≠nas: ~25g\\nü•ë Gorduras: ~25g\\n\\nQuer que eu adicione essa refei√ß√£o ao seu log de hoje? üìù\\\"\\n\\n---\\n\\n**REGRAS IMPORTANTES:**\\n- N√£o invente alimentos que n√£o aparecem claramente na imagem\\n- Use linguagem simples e pr√°tica\\n- Use negrito nos valores principais (calorias, macros)\\n- Use emojis para deixar o texto leve\\n- Tamanho m√°ximo de resposta: 2 a 3 par√°grafos\\n- Inclua sempre a pergunta final sobre adicionar ao log\\n- Seja direto e objetivo\\n- O estilo e tom devem seguir o exemplo acima\\n\\nA sa√≠da precisa estar pronta para ser enviada ao WhatsApp, sem necessidade de ajustes.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"image_url\",\n          \"image_url\": {\n            \"url\": \"{{ $('Code2').item.json.imageUrl }}\"\n          }\n        }\n      ]\n    }\n  ],\n  \"max_tokens\": 500\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1200,
        528
      ],
      "id": "5762d8f0-e238-4bd2-934c-5e937ea8df03",
      "name": "gpt-api-sem-msg"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 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"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"gpt-4o\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"*Prompt para An√°lise Nutricional ‚Äì Logger de Comida*\\n\\nVoc√™ √© um nutricionista virtual especializado em an√°lise de pratos via *WhatsApp*. Ao receber a imagem de uma refei√ß√£o, fa√ßa sua an√°lise interna completa mas RESPONDA APENAS com o resultado final formatado para o usu√°rio.\\n\\n*PROCESSO INTERNO (N√ÉO MOSTRAR):*\\n1. Identifique cada alimento e estime pesos em gramas\\n2. Calcule valores nutricionais por 100g de cada item\\n3. Calcule valores proporcionais ao peso estimado\\n4. Some todos os valores\\n\\n*RESPOSTA FINAL (FORMATO OBRIGAT√ìRIO):*\\nApenas envie uma mensagem com:\\n1. Frase animada com emoji\\n2. Descri√ß√£o breve do prato identificado\\n3. Resumo nutricional total com emojis espec√≠ficos:\\n   - üî• *XXX kcal* (calorias)\\n   - üí™ *XXg* (prote√≠nas) \\n   - ü•ë *XXg* (gorduras)\\n   - üåæ *XXg* (carboidratos)\\n4. Pergunta final: \\\"Quer que eu adicione essa refei√ß√£o ao seu log de hoje? üìù\\\"\\n\\n*DIRETRIZES OBRIGAT√ìRIAS:*\\n- N√ÉO mostre seu processo de pensamento ou c√°lculos\\n- N√ÉO liste ingredientes individuais ou pesos\\n- N√ÉO explique sua metodologia\\n- APENAS envie a resposta final formatada\\n- Use *negrito* para os valores num√©ricos\\n- M√°ximo 4 linhas de texto para mobile\\n- Linguagem casual e amig√°vel\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"{{ $('Code2').item.json.message }}\"\n        },\n        {\n          \"type\": \"image_url\",\n          \"image_url\": {\n            \"url\": \"{{ $('Code2').item.json.imageUrl }}\"\n          }\n        }\n      ]\n    }\n  ],\n  \"max_tokens\": 500\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1200,
        320
      ],
      "id": "c1c67225-1850-41a3-88bb-b768601c3224",
      "name": "gpt-api-com-msg"
    },
    {
      "parameters": {
        "jsCode": "// Get the input message from the previous node\nconst inputMessage = $input.first().json.choices[0].message.content;\n\nfunction parseAndValidateNutrition(message) {\n    // Regex patterns to extract nutritional values\n    const caloriesRegex = /üî• Calorias: ~(\\d+) kcal/;\n    const carbsRegex = /üåæ Carboidratos: ~(\\d+)g/;\n    const proteinsRegex = /üí™ Prote√≠nas: ~(\\d+)g/;\n    const fatsRegex = /ü•ë Gorduras: ~(\\d+)g/;\n    \n    // Extract values\n    const caloriesMatch = message.match(caloriesRegex);\n    const carbsMatch = message.match(carbsRegex);\n    const proteinsMatch = message.match(proteinsRegex);\n    const fatsMatch = message.match(fatsRegex);\n    \n    if (!caloriesMatch || !carbsMatch || !proteinsMatch || !fatsMatch) {\n        throw new Error('Could not parse all nutritional values from the message');\n    }\n    \n    const originalCalories = parseInt(caloriesMatch[1]);\n    const carbs = parseInt(carbsMatch[1]);\n    const proteins = parseInt(proteinsMatch[1]);\n    const fats = parseInt(fatsMatch[1]);\n    \n    // Calculate correct calories (carbs: 4kcal/g, proteins: 4kcal/g, fats: 9kcal/g)\n    const calculatedCalories = (carbs * 4) + (proteins * 4) + (fats * 9);\n    \n    // Check if calories need correction\n    const needsCorrection = originalCalories !== calculatedCalories;\n    \n    let correctedMessage = message;\n    if (needsCorrection) {\n        // Replace the calories in the message\n        correctedMessage = message.replace(\n            caloriesRegex, \n            `üî• Calorias: ~${calculatedCalories} kcal`\n        );\n    }\n    \n    return {\n        needsCorrection,\n        originalCalories,\n        calculatedCalories,\n        correctedMessage,\n        calorieDifference: calculatedCalories - originalCalories,\n        breakdown: {\n            carbs: { grams: carbs, calories: carbs * 4 },\n            proteins: { grams: proteins, calories: proteins * 4 },\n            fats: { grams: fats, calories: fats * 9 }\n        }\n    };\n}\n\ntry {\n    const result = parseAndValidateNutrition(inputMessage);\n    \n    return {\n        json: {\n            success: true,\n            originalMessage: inputMessage,\n            correctedMessage: result.correctedMessage,\n            needsCorrection: result.needsCorrection,\n            calories: {\n                original: result.originalCalories,\n                calculated: result.calculatedCalories,\n                difference: result.calorieDifference\n            },\n            nutritionalBreakdown: result.breakdown\n        }\n    };\n    \n} catch (error) {\n    return {\n        json: {\n            success: false,\n            error: error.message,\n            originalMessage: inputMessage\n        }\n    };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1424,
        528
      ],
      "id": "e1dc607e-3e33-4e93-8ce1-73524f41750d",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "// Get the input message from the previous node\nconst inputMessage = $input.first().json.choices[0].message.content;\n\nfunction parseAndValidateNutrition(message) {\n    // Regex patterns to extract nutritional values\n    const caloriesRegex = /üî• Calorias: ~(\\d+) kcal/;\n    const carbsRegex = /üåæ Carboidratos: ~(\\d+)g/;\n    const proteinsRegex = /üí™ Prote√≠nas: ~(\\d+)g/;\n    const fatsRegex = /ü•ë Gorduras: ~(\\d+)g/;\n    \n    // Extract values\n    const caloriesMatch = message.match(caloriesRegex);\n    const carbsMatch = message.match(carbsRegex);\n    const proteinsMatch = message.match(proteinsRegex);\n    const fatsMatch = message.match(fatsRegex);\n    \n    if (!caloriesMatch || !carbsMatch || !proteinsMatch || !fatsMatch) {\n        throw new Error('Could not parse all nutritional values from the message');\n    }\n    \n    const originalCalories = parseInt(caloriesMatch[1]);\n    const carbs = parseInt(carbsMatch[1]);\n    const proteins = parseInt(proteinsMatch[1]);\n    const fats = parseInt(fatsMatch[1]);\n    \n    // Calculate correct calories (carbs: 4kcal/g, proteins: 4kcal/g, fats: 9kcal/g)\n    const calculatedCalories = (carbs * 4) + (proteins * 4) + (fats * 9);\n    \n    // Check if calories need correction\n    const needsCorrection = originalCalories !== calculatedCalories;\n    \n    let correctedMessage = message;\n    if (needsCorrection) {\n        // Replace the calories in the message\n        correctedMessage = message.replace(\n            caloriesRegex, \n            `üî• Calorias: ~${calculatedCalories} kcal`\n        );\n    }\n    \n    return {\n        needsCorrection,\n        originalCalories,\n        calculatedCalories,\n        correctedMessage,\n        calorieDifference: calculatedCalories - originalCalories,\n        breakdown: {\n            carbs: { grams: carbs, calories: carbs * 4 },\n            proteins: { grams: proteins, calories: proteins * 4 },\n            fats: { grams: fats, calories: fats * 9 }\n        }\n    };\n}\n\ntry {\n    const result = parseAndValidateNutrition(inputMessage);\n    \n    return {\n        json: {\n            success: true,\n            originalMessage: inputMessage,\n            correctedMessage: result.correctedMessage,\n            needsCorrection: result.needsCorrection,\n            calories: {\n                original: result.originalCalories,\n                calculated: result.calculatedCalories,\n                difference: result.calorieDifference\n            },\n            nutritionalBreakdown: result.breakdown\n        }\n    };\n    \n} catch (error) {\n    return {\n        json: {\n            success: false,\n            error: error.message,\n            originalMessage: inputMessage\n        }\n    };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1424,
        320
      ],
      "id": "84c3ace1-7747-408d-bcf1-afd70e34100e",
      "name": "Code6"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "202af928-a324-411a-bf15-68a349e7bf9e",
                    "leftValue": "={{ $json.body.audio }}",
                    "rightValue": "",
                    "operator": {
                      "type": "object",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.text }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "id": "08fd0c80-307e-4f45-b1de-35192ee4ec5e"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -4400,
        672
      ],
      "id": "56b46c42-715a-423e-accd-acc57f601956",
      "name": "Check Input Type"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c05a7fbf-309a-407e-9fee-7e0b03f4a5c8",
              "name": "text",
              "value": "={{ $json.body.text.message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3744,
        768
      ],
      "id": "4fe559ee-f7ae-4f3a-9519-f5506830bdf8",
      "name": "Text Only Prompt"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "binaryPropertyName": "audio",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -3968,
        560
      ],
      "id": "e15f8e12-cec9-4ba5-b01e-4f6ddef06115",
      "name": "Transcribe Audio",
      "credentials": {
        "openAiApi": {
          "id": "OSiXiaMjcby4EcIk",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "219577d5-b028-48fc-90be-980f4171ab68",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3744,
        560
      ],
      "id": "c6302283-0a53-45b8-bd8c-f7b34a6e2f81",
      "name": "Audio Prompt"
    },
    {
      "parameters": {
        "url": "={{ $json.body.audio.audioUrl }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "audio"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4176,
        560
      ],
      "id": "ef2def73-ea73-4b26-a764-6f94ceccb870",
      "name": "Download Z-API Audio"
    },
    {
      "parameters": {
        "content": "Verifica√ß√£o de audio",
        "height": 360,
        "width": 1060
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4464,
        528
      ],
      "typeVersion": 1,
      "id": "df22c7da-23e9-4ca8-bb71-f757809096bf",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/3E1D888E8D8DE07F56022E7FADD21987/token/ED2BF32A855B887106BAAD09/send-text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "client-token",
              "value": "F60d85846fe6a4bfd986f72916b85da2fS"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $('Webhook').item.json.body.phone }}"
            },
            {
              "name": "message",
              "value": "=Parece que voc√™ ainda n√£o registrou nenhuma refei√ß√£o..."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        6304,
        2480
      ],
      "id": "992770a4-7621-4f75-8bb1-0f901bd43842",
      "name": "info dieta8",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\n\n//valores iniciais\nlet totais = {\n  calorias : 0,\n  carboidratos : 0,\n  proteinas : 0,\n  gorduras : 0\n};\n\n\n// somat√≥rio das refei√ß√µes\nfor (const item of items) {\n  const r = item.json;\n  totais.calorias += r.calorias;\n  totais.carboidratos += r.carboidratos;\n  totais.proteinas += r.proteinas;\n  totais.gorduras += r.gorduras;\n  \n}\n\n// json com os valores totais \nreturn totais;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6768,
        2000
      ],
      "id": "618b3a27-d446-419f-8453-16ab1aa4798b",
      "name": "Calculo dos totais"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/3E1D888E8D8DE07F56022E7FADD21987/token/ED2BF32A855B887106BAAD09/send-text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "client-token",
              "value": "F60d85846fe6a4bfd986f72916b85da2fS"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $json.phone }}"
            },
            {
              "name": "message",
              "value": "={{ $json.text }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        7808,
        2368
      ],
      "id": "832c19df-f5dd-400b-a279-8ef2faf5e336",
      "name": "enviar o historico",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "dietas",
        "filters": {
          "conditions": [
            {
              "keyName": "usuario_telefone",
              "keyValue": "={{ $json.body.phone }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        5440,
        2112
      ],
      "id": "01e51213-eb7a-4bd6-ac82-a7186c01ed18",
      "name": "Busca dieta",
      "credentials": {
        "supabaseApi": {
          "id": "aLPCtqdgRYyrwtIH",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "registros_alimentares",
        "returnAll": true,
        "filterType": "=manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "usuario_id",
              "condition": "eq",
              "keyValue": "={{ $json.usuario_id }}"
            },
            {
              "keyName": "data_consumo",
              "condition": "eq",
              "keyValue": "={{DateTime.now() }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        5712,
        2112
      ],
      "id": "14e273e0-aeeb-4145-959a-1bf942883c12",
      "name": "Busca historico diario",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "aLPCtqdgRYyrwtIH",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {},
      "name": "Unir Metas e Totais",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        7568,
        2368
      ],
      "id": "bbc76630-441d-43c2-8177-70957079352b"
    },
    {
      "parameters": {
        "jsCode": "let resposta = \"üìä Registros alimentares do dia:\\n\\n\";\n\nfor (const item of items) {\n  const r = item.json;\n  resposta += `üçΩÔ∏è Refei√ß√£o: ${r.tipo_refeicao}\\n`;\n  resposta += `üçõ Alimento: ${r.nome_alimento}\\n`;\n  resposta += `üî• Calorias: ${r.calorias} kcal\\n`;\n  resposta += `ü•ñ Carboidratos: ${r.carboidratos}g\\n`;\n  resposta += `ü•© Prote√≠nas: ${r.proteinas}g\\n`;\n  resposta += `üßà Gorduras: ${r.gorduras}g\\n`;\n  resposta += `üïí Hora: ${r.hora_consumo}\\n\\n`;\n}\n\nreturn [{ json: { text: resposta, phone: $('Webhook').first().json.body.phone } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6912,
        2768
      ],
      "id": "2a6bcb89-f404-4bc9-8003-adc1a1d4667f",
      "name": "Monta hist√≥rico dos registros"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "459e7f9b-4f9c-4849-881c-4a0dcd59873b",
              "leftValue": "={{ $json.isEmpty() }}",
              "rightValue": false,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        6128,
        2112
      ],
      "id": "eb71925c-0176-4fb8-850c-204bb6d55142",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "const dados_dieta = $('Busca dieta').first().json;\nconst dados_consumidos = $('Calculo dos totais').first().json;\n \n\n\nfunction avaliar(consumido, meta, unidade = \"g\") {\n  const diff = consumido - meta;\n  if (diff < 0) {\n    return `${consumido}${unidade} / ${meta}${unidade} ‚Üí Faltam ${Math.abs(diff)}${unidade}`;\n  } else if (diff === 0) {\n    return `${consumido}${unidade} / ${meta}${unidade} ‚Üí Meta atingida! üéØ`;\n  } else {\n    return `${consumido}${unidade} / ${meta}${unidade} ‚Üí Excedeu em ${diff}${unidade} ‚ö†Ô∏è`;\n  }\n}\n\nlet resposta = \"üìä Comparativo da dieta di√°ria:\\n\\n\";\nresposta += `üî• Calorias: ${avaliar(dados_consumidos.calorias, dados_dieta.calorias_diarias, \" kcal\")}\\n`;\nresposta += `ü•ñ Carboidratos: ${avaliar(dados_consumidos.carboidratos, dados_dieta.carboidrato_gramas)}\\n`;\nresposta += `ü•© Prote√≠nas: ${avaliar(dados_consumidos.proteinas, dados_dieta.proteina_gramas)}\\n`;\nresposta += `üßà Gorduras: ${avaliar(dados_consumidos.gorduras, dados_dieta.gordura_gramas)}\\n`;\n\nreturn [{ json: { text: resposta,\n                phone: dados_dieta.usuario_telefone} }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        7360,
        2000
      ],
      "id": "07d80a53-9e39-4602-b5e8-092b8fff7e3d",
      "name": "Compara com a dieta",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "inputText": "={{ $('Code2').item.json.message }}",
        "options": {
          "categories": "Quer Relatorio, n√£o quer relatorio"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.sentimentAnalysis",
      "typeVersion": 1,
      "position": [
        -880,
        2080
      ],
      "id": "e6ecef22-867d-4714-9403-f8c812e621fe",
      "name": "Sentiment Analysis1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -896,
        2384
      ],
      "id": "77600d4d-e53c-4c42-9cf1-78a23f716ba5",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "OSiXiaMjcby4EcIk",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://world.openfoodfacts.org/api/v2/product/{{ $('barcode-scanner1').item.json.data.barcodeValue }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        992,
        176
      ],
      "id": "3d08ff38-9b2b-4e17-b3e9-57c22c25857a",
      "name": "HTTP Request1"
    }
  ],
  "pinData": {
    "Webhook1": [
      {
        "json": {
          "headers": {
            "host": "n8n.caloscan.com.br",
            "user-agent": "Mozilla/5.0 (X11; Linux x86_64; rv:111.0) Gecko/20100101 Firefox/111.0",
            "content-length": "783",
            "content-type": "application/json",
            "origin": "https://api.z-api.io",
            "server": "Z-API",
            "via": "2.0 Caddy",
            "x-forwarded-for": "137.131.144.160",
            "x-forwarded-host": "n8n.caloscan.com.br",
            "x-forwarded-proto": "https",
            "z-api-token": "ED2BF32A855B887106BAAD09",
            "accept-encoding": "gzip"
          },
          "params": {},
          "query": {},
          "body": {
            "isStatusReply": false,
            "chatLid": "184980013592738@lid",
            "connectedPhone": "5521974610397",
            "waitingMessage": false,
            "isEdit": false,
            "isGroup": false,
            "isNewsletter": false,
            "instanceId": "3E1D888E8D8DE07F56022E7FADD21987",
            "messageId": "3F69CCDA33B5F65BAA78",
            "phone": "5521975911777",
            "fromMe": false,
            "momment": 1752624303000,
            "status": "RECEIVED",
            "chatName": "Pedro Silvestre",
            "senderPhoto": null,
            "senderName": "Pedro üôÉ",
            "photo": "https://pps.whatsapp.net/v/t61.24694-24/421227589_1039872240450622_6240477542377425045_n.jpg?ccb=11-4&oh=01_Q5Aa2AEEIdhN-wMsIRX6fJfY9NBTi51z5Rktivj3xtx5_m4SRQ&oe=6883DAF4&_nc_sid=5e03e0&_nc_cat=107",
            "broadcast": false,
            "participantLid": null,
            "messageExpirationSeconds": 0,
            "forwarded": false,
            "type": "ReceivedCallback",
            "fromApi": false,
            "text": {
              "message": "e o feij√£o vermelho?"
            }
          },
          "webhookUrl": "https://n8n.caloscan.com.br/webhook/44b25479-1cf5-4edc-8c21-cc62fc7d91da",
          "executionMode": "production"
        }
      }
    ],
    "AI Agent1": [
      {
        "json": {
          "output": "O feij√£o vermelho, tamb√©m conhecido como feij√£o do tipo kidney, √© uma excelente op√ß√£o para incluir na sua alimenta√ß√£o! Aqui est√£o alguns pontos interessantes sobre ele:\n\n1. **Nutri√ß√£o**: O feij√£o vermelho √© uma fonte rica em prote√≠nas, fibras, vitaminas (como as do complexo B) e minerais (como ferro e pot√°ssio). As fibras s√£o especialmente importantes para a sa√∫de digestiva e podem ajudar na saciedade.\n\n2. **Sa√∫de do cora√ß√£o**: Por ser rico em fibras e antioxidantes, o feij√£o vermelho pode ajudar a reduzir o colesterol LDL (\"ruim\") e melhorar a sa√∫de do cora√ß√£o.\n\n3. **Controle de a√ß√∫car no sangue**: Devido ao seu baixo √≠ndice glic√™mico, o feij√£o vermelho libera√ß√£o de glicose de maneira mais lenta na corrente sangu√≠nea, o que pode ser ben√©fico para o controle da glicose.\n\n4. **Versatilidade**: Ele pode ser utilizado em diversas receitas, como sopas, saladas, chili e at√© mesmo como acompanhamento. \n\n5. **Prepara√ß√£o**: √â sempre importante cozinhar bem o feij√£o vermelho, pois ele cont√©m toxinas que podem ser prejudiciais se ingeridas cruas ou mal cozidas.\n\nSe voc√™ tem alguma d√∫vida espec√≠fica sobre o feij√£o vermelho ou como incorpor√°-lo √† sua dieta, sinta-se √† vontade para perguntar!"
        }
      }
    ]
  },
  "connections": {
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Redis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Check Input Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "barcode-scanner1": {
      "main": [
        [
          {
            "node": "If-chaca-barcode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "HTTP Request retorna macros para wpp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB": {
      "main": [
        []
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Http Request retorna Mensagem para Wpp4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Http Request retorna Mensagem para Wpp5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Sentiment Analysis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase2": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "HTTP Request4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request4": {
      "main": [
        [
          {
            "node": "Supabase4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "HTTP Request5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Http Request retorna Mensagem para Wpp": {
      "main": [
        [
          {
            "node": "Supabase cria pending request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase cria pending request": {
      "main": [
        [
          {
            "node": "Http Request retorna Mensagem para Wpp3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request retorna macros para wpp": {
      "main": [
        [
          {
            "node": "Busca dieta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis": {
      "main": [
        [
          {
            "node": "Supabase1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis1": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis2": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase": {
      "main": [
        [
          {
            "node": "Redis2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Http Request retorna Mensagem para Wpp1": {
      "main": [
        [
          {
            "node": "Supabase cria pending request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase cria pending request1": {
      "main": [
        [
          {
            "node": "Http Request retorna Mensagem para Wpp2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Http Request retorna Mensagem para Wpp2": {
      "main": [
        [
          {
            "node": "Busca dieta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Http Request retorna Mensagem para Wpp3": {
      "main": [
        [
          {
            "node": "Busca dieta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Http Request retorna Mensagem para Wpp4": {
      "main": [
        [
          {
            "node": "barcode-scanner1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Http Request retorna Mensagem para Wpp5": {
      "main": [
        [
          {
            "node": "Sentiment Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase1": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-user-id": {
      "main": [
        [
          {
            "node": "get-message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-message": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "nutrition-extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If4": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Supabase5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase3": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase5": {
      "main": [
        [
          {
            "node": "Supabase3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "Supabase7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "nutrition-extractor": {
      "main": [
        [
          {
            "node": "If4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sentiment Analysis": {
      "main": [
        [
          {
            "node": "get-user-id",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Supabase6",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Supabase6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Sentiment Analysis",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Supabase7": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Supabase8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If-chaca-barcode": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If-checa-mensagem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If-checa-mensagem": {
      "main": [
        [
          {
            "node": "gpt-api-com-msg",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "gpt-api-sem-msg",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "gpt-api-sem-msg": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "gpt-api-com-msg": {
      "main": [
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Http Request retorna Mensagem para Wpp1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "Http Request retorna Mensagem para Wpp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Input Type": {
      "main": [
        [
          {
            "node": "Download Z-API Audio",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Text Only Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text Only Prompt": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe Audio": {
      "main": [
        [
          {
            "node": "Audio Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Audio Prompt": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Z-API Audio": {
      "main": [
        [
          {
            "node": "Transcribe Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculo dos totais": {
      "main": [
        [
          {
            "node": "Compara com a dieta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca dieta": {
      "main": [
        [
          {
            "node": "Busca historico diario",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca historico diario": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unir Metas e Totais": {
      "main": [
        [
          {
            "node": "enviar o historico",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Monta hist√≥rico dos registros": {
      "main": [
        [
          {
            "node": "Unir Metas e Totais",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Calculo dos totais",
            "type": "main",
            "index": 0
          },
          {
            "node": "Monta hist√≥rico dos registros",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "info dieta8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compara com a dieta": {
      "main": [
        [
          {
            "node": "Unir Metas e Totais",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sentiment Analysis1": {
      "main": [
        [
          {
            "node": "Busca dieta",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Sentiment Analysis1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a61b9799-41f7-464d-8ead-a7bc35ca7e94",
  "meta": {
    "instanceId": "e3e5231b9a43762dfd5b9269d048865d2504eba5680136b06f9bc85b9b7008b3"
  },
  "id": "oEjb6144vhpJ60Mb",
  "tags": []
}